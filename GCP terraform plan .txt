
Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following
symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # data.google_compute_subnetwork.subnetwork will be read during apply
  # (config refers to values not yet known)
 <= data "google_compute_subnetwork" "subnetwork"  {
      + description              = (known after apply)
      + gateway_address          = (known after apply)
      + id                       = (known after apply)
      + ip_cidr_range            = (known after apply)
      + name                     = "subnet-05"
      + network                  = (known after apply)
      + private_ip_google_access = (known after apply)
      + project                  = "precise-plane-336505"
      + region                   = "us-central1"
      + secondary_ip_range       = (known after apply)
      + self_link                = (known after apply)
    }

  # google_project_service.project["bigquerystorage.googleapis.com"] will be created
  + resource "google_project_service" "project" {
      + disable_dependent_services = true
      + disable_on_destroy         = true
      + id                         = (known after apply)
      + project                    = "precise-plane-336505"
      + service                    = "bigquerystorage.googleapis.com"

      + timeouts {
          + create = "30m"
          + update = "40m"
        }
    }

  # google_project_service.project["cloudapis.googleapis.com"] will be created
  + resource "google_project_service" "project" {
      + disable_dependent_services = true
      + disable_on_destroy         = true
      + id                         = (known after apply)
      + project                    = "precise-plane-336505"
      + service                    = "cloudapis.googleapis.com"

      + timeouts {
          + create = "30m"
          + update = "40m"
        }
    }

  # google_project_service.project["clouddebugger.googleapis.com"] will be created
  + resource "google_project_service" "project" {
      + disable_dependent_services = true
      + disable_on_destroy         = true
      + id                         = (known after apply)
      + project                    = "precise-plane-336505"
      + service                    = "clouddebugger.googleapis.com"

      + timeouts {
          + create = "30m"
          + update = "40m"
        }
    }

  # google_project_service.project["cloudresourcemanager.googleapis.com"] will be created
  + resource "google_project_service" "project" {
      + disable_dependent_services = true
      + disable_on_destroy         = true
      + id                         = (known after apply)
      + project                    = "precise-plane-336505"
      + service                    = "cloudresourcemanager.googleapis.com"

      + timeouts {
          + create = "30m"
          + update = "40m"
        }
    }

  # google_project_service.project["cloudtrace.googleapis.com"] will be created
  + resource "google_project_service" "project" {
      + disable_dependent_services = true
      + disable_on_destroy         = true
      + id                         = (known after apply)
      + project                    = "precise-plane-336505"
      + service                    = "cloudtrace.googleapis.com"

      + timeouts {
          + create = "30m"
          + update = "40m"
        }
    }

  # google_project_service.project["compute.googleapis.com"] will be created
  + resource "google_project_service" "project" {
      + disable_dependent_services = true
      + disable_on_destroy         = true
      + id                         = (known after apply)
      + project                    = "precise-plane-336505"
      + service                    = "compute.googleapis.com"

      + timeouts {
          + create = "30m"
          + update = "40m"
        }
    }

  # google_project_service.project["container.googleapis.com"] will be created
  + resource "google_project_service" "project" {
      + disable_dependent_services = true
      + disable_on_destroy         = true
      + id                         = (known after apply)
      + project                    = "precise-plane-336505"
      + service                    = "container.googleapis.com"

      + timeouts {
          + create = "30m"
          + update = "40m"
        }
    }

  # google_project_service.project["iam.googleapis.com"] will be created
  + resource "google_project_service" "project" {
      + disable_dependent_services = true
      + disable_on_destroy         = true
      + id                         = (known after apply)
      + project                    = "precise-plane-336505"
      + service                    = "iam.googleapis.com"

      + timeouts {
          + create = "30m"
          + update = "40m"
        }
    }

  # google_project_service.project["iamcredentials.googleapis.com"] will be created
  + resource "google_project_service" "project" {
      + disable_dependent_services = true
      + disable_on_destroy         = true
      + id                         = (known after apply)
      + project                    = "precise-plane-336505"
      + service                    = "iamcredentials.googleapis.com"

      + timeouts {
          + create = "30m"
          + update = "40m"
        }
    }

  # google_project_service.project["logging.googleapis.com"] will be created
  + resource "google_project_service" "project" {
      + disable_dependent_services = true
      + disable_on_destroy         = true
      + id                         = (known after apply)
      + project                    = "precise-plane-336505"
      + service                    = "logging.googleapis.com"

      + timeouts {
          + create = "30m"
          + update = "40m"
        }
    }

  # google_project_service.project["monitoring.googleapis.com"] will be created
  + resource "google_project_service" "project" {
      + disable_dependent_services = true
      + disable_on_destroy         = true
      + id                         = (known after apply)
      + project                    = "precise-plane-336505"
      + service                    = "monitoring.googleapis.com"

      + timeouts {
          + create = "30m"
          + update = "40m"
        }
    }

  # google_project_service.project["oslogin.googleapis.com"] will be created
  + resource "google_project_service" "project" {
      + disable_dependent_services = true
      + disable_on_destroy         = true
      + id                         = (known after apply)
      + project                    = "precise-plane-336505"
      + service                    = "oslogin.googleapis.com"

      + timeouts {
          + create = "30m"
          + update = "40m"
        }
    }

  # google_project_service.project["servicemanagement.googleapis.com"] will be created
  + resource "google_project_service" "project" {
      + disable_dependent_services = true
      + disable_on_destroy         = true
      + id                         = (known after apply)
      + project                    = "precise-plane-336505"
      + service                    = "servicemanagement.googleapis.com"

      + timeouts {
          + create = "30m"
          + update = "40m"
        }
    }

  # google_project_service.project["serviceusage.googleapis.com"] will be created
  + resource "google_project_service" "project" {
      + disable_dependent_services = true
      + disable_on_destroy         = true
      + id                         = (known after apply)
      + project                    = "precise-plane-336505"
      + service                    = "serviceusage.googleapis.com"

      + timeouts {
          + create = "30m"
          + update = "40m"
        }
    }

  # google_project_service.project["sourcerepo.googleapis.com"] will be created
  + resource "google_project_service" "project" {
      + disable_dependent_services = true
      + disable_on_destroy         = true
      + id                         = (known after apply)
      + project                    = "precise-plane-336505"
      + service                    = "sourcerepo.googleapis.com"

      + timeouts {
          + create = "30m"
          + update = "40m"
        }
    }

  # google_project_service.project["sql-component.googleapis.com"] will be created
  + resource "google_project_service" "project" {
      + disable_dependent_services = true
      + disable_on_destroy         = true
      + id                         = (known after apply)
      + project                    = "precise-plane-336505"
      + service                    = "sql-component.googleapis.com"

      + timeouts {
          + create = "30m"
          + update = "40m"
        }
    }

  # google_project_service.project["storage-api.googleapis.com"] will be created
  + resource "google_project_service" "project" {
      + disable_dependent_services = true
      + disable_on_destroy         = true
      + id                         = (known after apply)
      + project                    = "precise-plane-336505"
      + service                    = "storage-api.googleapis.com"

      + timeouts {
          + create = "30m"
          + update = "40m"
        }
    }

  # google_project_service.project["storage-component.googleapis.com"] will be created
  + resource "google_project_service" "project" {
      + disable_dependent_services = true
      + disable_on_destroy         = true
      + id                         = (known after apply)
      + project                    = "precise-plane-336505"
      + service                    = "storage-component.googleapis.com"

      + timeouts {
          + create = "30m"
          + update = "40m"
        }
    }

  # module.bigquery["bigquerydataset11"].google_bigquery_dataset.main will be created
  + resource "google_bigquery_dataset" "main" {
      + creation_time              = (known after apply)
      + dataset_id                 = "bigquerydataset11"
      + delete_contents_on_destroy = false
      + etag                       = (known after apply)
      + friendly_name              = "bigquerydataset11"
      + id                         = (known after apply)
      + last_modified_time         = (known after apply)
      + location                   = "US"
      + project                    = "precise-plane-336505"
      + self_link                  = (known after apply)

      + access {
          + role          = "OWNER"
          + special_group = "projectOwners"
        }
    }

  # module.bigquery["bigquerydataset21"].google_bigquery_dataset.main will be created
  + resource "google_bigquery_dataset" "main" {
      + creation_time              = (known after apply)
      + dataset_id                 = "bigquerydataset21"
      + delete_contents_on_destroy = false
      + etag                       = (known after apply)
      + friendly_name              = "bigquerydataset21"
      + id                         = (known after apply)
      + last_modified_time         = (known after apply)
      + location                   = "US"
      + project                    = "precise-plane-336505"
      + self_link                  = (known after apply)

      + access {
          + role          = "OWNER"
          + special_group = "projectOwners"
        }
    }

  # module.bigquery["bigquerydataset31"].google_bigquery_dataset.main will be created
  + resource "google_bigquery_dataset" "main" {
      + creation_time              = (known after apply)
      + dataset_id                 = "bigquerydataset31"
      + delete_contents_on_destroy = false
      + etag                       = (known after apply)
      + friendly_name              = "bigquerydataset31"
      + id                         = (known after apply)
      + last_modified_time         = (known after apply)
      + location                   = "US"
      + project                    = "precise-plane-336505"
      + self_link                  = (known after apply)

      + access {
          + role          = "OWNER"
          + special_group = "projectOwners"
        }
    }

  # module.bucket["1"].google_storage_bucket.bucket will be created
  + resource "google_storage_bucket" "bucket" {
      + bucket_policy_only          = (known after apply)
      + force_destroy               = false
      + id                          = (known after apply)
      + location                    = "US-CENTRAL1"
      + name                        = "example-bucket-1-precise-plane-336505"
      + project                     = "precise-plane-336505"
      + self_link                   = (known after apply)
      + storage_class               = "STANDARD"
      + uniform_bucket_level_access = true
      + url                         = (known after apply)

      + versioning {
          + enabled = true
        }
    }

  # module.bucket["2"].google_storage_bucket.bucket will be created
  + resource "google_storage_bucket" "bucket" {
      + bucket_policy_only          = (known after apply)
      + force_destroy               = false
      + id                          = (known after apply)
      + location                    = "US-CENTRAL1"
      + name                        = "example-bucket-2-precise-plane-336505"
      + project                     = "precise-plane-336505"
      + self_link                   = (known after apply)
      + storage_class               = "STANDARD"
      + uniform_bucket_level_access = true
      + url                         = (known after apply)

      + versioning {
          + enabled = true
        }
    }

  # module.bucket["3"].google_storage_bucket.bucket will be created
  + resource "google_storage_bucket" "bucket" {
      + bucket_policy_only          = (known after apply)
      + force_destroy               = false
      + id                          = (known after apply)
      + location                    = "US-CENTRAL1"
      + name                        = "example-bucket-3-precise-plane-336505"
      + project                     = "precise-plane-336505"
      + self_link                   = (known after apply)
      + storage_class               = "STANDARD"
      + uniform_bucket_level_access = true
      + url                         = (known after apply)

      + versioning {
          + enabled = true
        }
    }

  # module.gke.google_container_cluster.primary will be created
  + resource "google_container_cluster" "primary" {
      + cluster_ipv4_cidr           = (known after apply)
      + datapath_provider           = (known after apply)
      + default_max_pods_per_node   = 110
      + enable_binary_authorization = false
      + enable_intranode_visibility = (known after apply)
      + enable_kubernetes_alpha     = false
      + enable_legacy_abac          = false
      + enable_shielded_nodes       = true
      + endpoint                    = (known after apply)
      + id                          = (known after apply)
      + instance_group_urls         = (known after apply)
      + label_fingerprint           = (known after apply)
      + location                    = "us-central1-c"
      + logging_service             = "logging.googleapis.com/kubernetes"
      + master_version              = (known after apply)
      + min_master_version          = "1.21.6-gke.1500"
      + monitoring_service          = "monitoring.googleapis.com/kubernetes"
      + name                        = "vpc-cluster"
      + network                     = "projects/precise-plane-336505/global/networks/dabourvpc"
      + networking_mode             = (known after apply)
      + node_locations              = (known after apply)
      + node_version                = (known after apply)
      + operation                   = (known after apply)
      + private_ipv6_google_access  = (known after apply)
      + project                     = "precise-plane-336505"
      + remove_default_node_pool    = false
      + self_link                   = (known after apply)
      + services_ipv4_cidr          = (known after apply)
      + subnetwork                  = "projects/precise-plane-336505/regions/us-central1/subnetworks/subnet-05"
      + tpu_ipv4_cidr_block         = (known after apply)

      + addons_config {
          + cloudrun_config {
              + disabled           = (known after apply)
              + load_balancer_type = (known after apply)
            }

          + horizontal_pod_autoscaling {
              + disabled = false
            }

          + http_load_balancing {
              + disabled = false
            }

          + network_policy_config {
              + disabled = true
            }
        }

      + authenticator_groups_config {
          + security_group = (known after apply)
        }

      + cluster_autoscaling {
          + enabled = false

          + auto_provisioning_defaults {
              + oauth_scopes    = (known after apply)
              + service_account = (known after apply)
            }
        }

      + database_encryption {
          + state = "DECRYPTED"
        }

      + default_snat_status {
          + disabled = (known after apply)
        }

      + ip_allocation_policy {
          + cluster_ipv4_cidr_block       = (known after apply)
          + cluster_secondary_range_name  = "ip-range-pods"
          + services_ipv4_cidr_block      = (known after apply)
          + services_secondary_range_name = "ip-range-scv"
        }

      + logging_config {
          + enable_components = (known after apply)
        }

      + maintenance_policy {
          + daily_maintenance_window {
              + duration   = (known after apply)
              + start_time = "05:00"
            }
        }

      + master_auth {
          + client_certificate     = (known after apply)
          + client_key             = (sensitive value)
          + cluster_ca_certificate = (known after apply)

          + client_certificate_config {
              + issue_client_certificate = false
            }
        }

      + master_authorized_networks_config {
          + cidr_blocks {
              + cidr_block   = "172.16.0.0/28"
              + display_name = "VPC"
            }
        }

      + monitoring_config {
          + enable_components = (known after apply)
        }

      + network_policy {
          + enabled = false
        }

      + node_config {
          + disk_size_gb      = (known after apply)
          + disk_type         = (known after apply)
          + guest_accelerator = (known after apply)
          + image_type        = (known after apply)
          + labels            = (known after apply)
          + local_ssd_count   = (known after apply)
          + machine_type      = (known after apply)
          + metadata          = (known after apply)
          + min_cpu_platform  = (known after apply)
          + oauth_scopes      = (known after apply)
          + preemptible       = (known after apply)
          + service_account   = (known after apply)
          + tags              = (known after apply)
          + taint             = (known after apply)

          + shielded_instance_config {
              + enable_integrity_monitoring = (known after apply)
              + enable_secure_boot          = (known after apply)
            }

          + workload_metadata_config {
              + mode          = (known after apply)
              + node_metadata = (known after apply)
            }
        }

      + node_pool {
          + initial_node_count  = 0
          + instance_group_urls = (known after apply)
          + max_pods_per_node   = (known after apply)
          + name                = "default-pool"
          + name_prefix         = (known after apply)
          + node_count          = (known after apply)
          + node_locations      = (known after apply)
          + version             = (known after apply)

          + management {
              + auto_repair  = (known after apply)
              + auto_upgrade = (known after apply)
            }

          + node_config {
              + disk_size_gb      = (known after apply)
              + disk_type         = (known after apply)
              + guest_accelerator = (known after apply)
              + image_type        = "COS"
              + labels            = (known after apply)
              + local_ssd_count   = (known after apply)
              + machine_type      = "e2-standard-2"
              + metadata          = (known after apply)
              + oauth_scopes      = (known after apply)
              + preemptible       = false
              + service_account   = "terraform@precise-plane-336505.iam.gserviceaccount.com"
              + taint             = (known after apply)

              + shielded_instance_config {
                  + enable_integrity_monitoring = true
                  + enable_secure_boot          = false
                }

              + workload_metadata_config {
                  + mode          = (known after apply)
                  + node_metadata = "GKE_METADATA_SERVER"
                }
            }

          + upgrade_settings {
              + max_surge       = (known after apply)
              + max_unavailable = (known after apply)
            }
        }

      + private_cluster_config {
          + enable_private_endpoint = true
          + enable_private_nodes    = true
          + master_ipv4_cidr_block  = "172.16.0.0/28"
          + peering_name            = (known after apply)
          + private_endpoint        = (known after apply)
          + public_endpoint         = (known after apply)

          + master_global_access_config {
              + enabled = (known after apply)
            }
        }

      + release_channel {
          + channel = (known after apply)
        }

      + timeouts {
          + create = "45m"
          + delete = "45m"
          + update = "45m"
        }

      + vertical_pod_autoscaling {
          + enabled = false
        }

      + workload_identity_config {
          + identity_namespace = "precise-plane-336505.svc.id.goog"
        }
    }

  # module.gke.google_container_node_pool.pools["default-node-pool"] will be created
  + resource "google_container_node_pool" "pools" {
      + cluster             = "vpc-cluster"
      + id                  = (known after apply)
      + initial_node_count  = 1
      + instance_group_urls = (known after apply)
      + location            = "us-central1-c"
      + max_pods_per_node   = (known after apply)
      + name                = "default-node-pool"
      + name_prefix         = (known after apply)
      + node_count          = (known after apply)
      + node_locations      = (known after apply)
      + operation           = (known after apply)
      + project             = "precise-plane-336505"
      + version             = (known after apply)

      + autoscaling {
          + max_node_count = 100
          + min_node_count = 4
        }

      + management {
          + auto_repair  = true
          + auto_upgrade = true
        }

      + node_config {
          + disk_size_gb      = 100
          + disk_type         = "pd-standard"
          + guest_accelerator = []
          + image_type        = "COS"
          + labels            = {
              + "cluster_name"      = "vpc-cluster"
              + "default-node-pool" = "true"
              + "node_pool"         = "default-node-pool"
            }
          + local_ssd_count   = 0
          + machine_type      = "e2-standard-2"
          + metadata          = {
              + "cluster_name"                    = "vpc-cluster"
              + "disable-legacy-endpoints"        = "true"
              + "node-pool-metadata-custom-value" = "my-node-pool"
              + "node_pool"                       = "default-node-pool"
            }
          + oauth_scopes      = [
              + "https://www.googleapis.com/auth/cloud-platform",
            ]
          + preemptible       = false
          + service_account   = "terraform@precise-plane-336505.iam.gserviceaccount.com"
          + tags              = [
              + "gke-vpc-cluster",
              + "gke-vpc-cluster-default-node-pool",
              + "default-node-pool",
            ]
          + taint             = [
              + {
                  + effect = "PREFER_NO_SCHEDULE"
                  + key    = "default-node-pool"
                  + value  = "true"
                },
            ]

          + shielded_instance_config {
              + enable_integrity_monitoring = true
              + enable_secure_boot          = false
            }

          + workload_metadata_config {
              + mode          = (known after apply)
              + node_metadata = "GKE_METADATA_SERVER"
            }
        }

      + timeouts {
          + create = "45m"
          + delete = "45m"
          + update = "45m"
        }

      + upgrade_settings {
          + max_surge       = (known after apply)
          + max_unavailable = (known after apply)
        }
    }

  # module.gke.google_project_iam_member.cluster_service_account-log_writer[0] will be created
  + resource "google_project_iam_member" "cluster_service_account-log_writer" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "precise-plane-336505"
      + role    = "roles/logging.logWriter"
    }

  # module.gke.google_project_iam_member.cluster_service_account-metric_writer[0] will be created
  + resource "google_project_iam_member" "cluster_service_account-metric_writer" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "precise-plane-336505"
      + role    = "roles/monitoring.metricWriter"
    }

  # module.gke.google_project_iam_member.cluster_service_account-monitoring_viewer[0] will be created
  + resource "google_project_iam_member" "cluster_service_account-monitoring_viewer" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "precise-plane-336505"
      + role    = "roles/monitoring.viewer"
    }

  # module.gke.google_project_iam_member.cluster_service_account-resourceMetadata-writer[0] will be created
  + resource "google_project_iam_member" "cluster_service_account-resourceMetadata-writer" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "precise-plane-336505"
      + role    = "roles/stackdriver.resourceMetadata.writer"
    }

  # module.gke.google_service_account.cluster_service_account[0] will be created
  + resource "google_service_account" "cluster_service_account" {
      + account_id   = (known after apply)
      + disabled     = false
      + display_name = "Terraform-managed service account for cluster vpc-cluster"
      + email        = (known after apply)
      + id           = (known after apply)
      + name         = (known after apply)
      + project      = "precise-plane-336505"
      + unique_id    = (known after apply)
    }

  # module.gke.random_shuffle.available_zones will be created
  + resource "random_shuffle" "available_zones" {
      + id           = (known after apply)
      + input        = [
          + "us-central1-a",
          + "us-central1-b",
          + "us-central1-c",
          + "us-central1-f",
        ]
      + result       = (known after apply)
      + result_count = 3
    }

  # module.gke.random_string.cluster_service_account_suffix will be created
  + resource "random_string" "cluster_service_account_suffix" {
      + id          = (known after apply)
      + length      = 4
      + lower       = true
      + min_lower   = 0
      + min_numeric = 0
      + min_special = 0
      + min_upper   = 0
      + number      = true
      + result      = (known after apply)
      + special     = false
      + upper       = false
    }

  # module.subnets.google_compute_subnetwork.subnetwork["us-central1/subnet-05"] will be created
  + resource "google_compute_subnetwork" "subnetwork" {
      + creation_timestamp         = (known after apply)
      + external_ipv6_prefix       = (known after apply)
      + fingerprint                = (known after apply)
      + gateway_address            = (known after apply)
      + id                         = (known after apply)
      + ip_cidr_range              = "10.10.0.0/16"
      + ipv6_cidr_range            = (known after apply)
      + name                       = "subnet-05"
      + network                    = "dabourvpc"
      + private_ip_google_access   = false
      + private_ipv6_google_access = (known after apply)
      + project                    = "precise-plane-336505"
      + purpose                    = (known after apply)
      + region                     = "us-central1"
      + secondary_ip_range         = [
          + {
              + ip_cidr_range = "192.168.0.0/18"
              + range_name    = "ip-range-pods"
            },
          + {
              + ip_cidr_range = "192.168.64.0/18"
              + range_name    = "ip-range-scv"
            },
        ]
      + self_link                  = (known after apply)
      + stack_type                 = (known after apply)
    }

  # module.vpc.google_compute_network.network will be created
  + resource "google_compute_network" "network" {
      + auto_create_subnetworks         = true
      + delete_default_routes_on_create = false
      + gateway_ipv4                    = (known after apply)
      + id                              = (known after apply)
      + mtu                             = (known after apply)
      + name                            = "dabourvpc"
      + project                         = "precise-plane-336505"
      + routing_mode                    = (known after apply)
      + self_link                       = (known after apply)
    }

  # module.gke.module.gcloud_delete_default_kube_dns_configmap.module.gcloud_kubectl.null_resource.module_depends_on[0] will be created
  + resource "null_resource" "module_depends_on" {
      + id       = (known after apply)
      + triggers = {
          + "value" = "2"
        }
    }
    }